// generated by Fast Light User Interface Designer (fluid) version 1.0400
//
// Copyright 2017-2018 The fltkal authors
// Copyright 1998-2018 by Bill Spitzak and others.
//
//                              FLTK License
//                            December 11, 2001
// 
// The FLTK library and included programs are provided under the terms
// of the GNU Library General Public License (LGPL) with the following
// exceptions:
// 
//     1. Modifications to the FLTK configure script, config
//        header file, and makefiles by themselves to support
//        a specific platform do not constitute a modified or
//        derivative work.
// 
//       The authors do request that such modifications be
//       contributed to the FLTK project - send all contributions
//       through the "Software Trouble Report" on the following page:
//  
//            http://www.fltk.org/str.php
// 
//     2. Widgets that are subclassed from FLTK widgets do not
//        constitute a derivative work.
// 
//     3. Static linking of applications and widgets to the
//        FLTK library does not constitute a derivative work
//        and does not require the author to provide source
//        code for the application or widget, use the shared
//        FLTK libraries, or link their applications or
//        widgets against a user-supplied version of FLTK.
// 
//        If you link the application or widget to a modified
//        version of FLTK, then the changes to FLTK must be
//        provided under the terms of the LGPL in sections
//        1, 2, and 4.
// 
//     4. You do not have to provide a copy of the FLTK license
//        with programs that are linked to the FLTK library, nor
//        do you have to identify the FLTK license in your
//        program or documentation as required by section 6
//        of the LGPL.
// 
//        However, programs must still identify their use of FLTK.
//        The following example statement can be included in user
//        documentation to satisfy this requirement:
// 
//            [program/widget] is based in part on the work of
//            the FLTK project (http://www.fltk.org).
// 
//     This library is free software; you can redistribute it and/or
//     modify it under the terms of the GNU Library General Public
//     License as published by the Free Software Foundation; either
//     version 2 of the License, or (at your option) any later version.
// 
//     This library is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//     Library General Public License for more details.
// 
//     You should have received a copy of the GNU Library General Public
//     License along with FLTK.  If not, see <http://www.gnu.org/licenses/>.
//
//

#include "tvaluato.h"

Fl_Simple_Terminal *tty=(Fl_Simple_Terminal *)0;

int main(int argc, char **argv) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(580, 640, "Valuator classes, showing values for type()");
    w = o; if (w) {/* empty */}
    o->color((Fl_Color)43);
    o->selection_color((Fl_Color)43);
    { Fl_Box* o = new Fl_Box(10, 10, 280, 210, "Fl_Slider");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Slider* o = new Fl_Slider(30, 45, 20, 145, "0");
      o->tooltip("Vertical Slider");
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Slider FL_VERT_SLIDER"));
      o->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Slider* o
    { Fl_Slider* o = new Fl_Slider(70, 55, 20, 145, "FL_VERT_FILL_SLIDER");
      o->type(2);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Slider FL_VERT_FILL_SLIDER"));
    } // Fl_Slider* o
    { Fl_Slider* o = new Fl_Slider(105, 45, 20, 145, "FL_VERT_NICE_SLIDER");
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)10);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Slider FL_VERT_NICE_SLIDER"));
      o->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Slider* o
    { Fl_Slider* o = new Fl_Slider(140, 80, 130, 20, "FL_HORIZONTAL");
      o->type(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Slider FL_HORIZONTAL"));
    } // Fl_Slider* o
    { Fl_Slider* o = new Fl_Slider(140, 120, 130, 20, "FL_HOR_FILL_SLIDER");
      o->type(3);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Slider FL_HOR_FILL_SLIDER"));
    } // Fl_Slider* o
    { Fl_Slider* o = new Fl_Slider(140, 160, 130, 20, "FL_HOR_NICE_SLIDER");
      o->type(5);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)10);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Slider FL_HOR_NICE_SLIDER"));
    } // Fl_Slider* o
    { Fl_Box* o = new Fl_Box(10, 230, 280, 210, "Fl_Value_Slider");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Value_Slider* o = new Fl_Value_Slider(30, 260, 30, 145, "0");
      o->tooltip("Value Slider");
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("FL_VERT_SLIDER"));
      o->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Value_Slider* o
    { Fl_Value_Slider* o = new Fl_Value_Slider(70, 275, 30, 140, "FL_VERT_FILL_SLIDER");
      o->type(2);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Value_Slider FL_VERT_FILL_SLIDER"));
    } // Fl_Value_Slider* o
    { Fl_Value_Slider* o = new Fl_Value_Slider(110, 260, 20, 145, "FL_VERT_NICE_SLIDER");
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)10);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Value_Slider FL_VERT_NICE_SLIDER"));
      o->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Value_Slider* o
    { Fl_Value_Slider* o = new Fl_Value_Slider(140, 290, 130, 20, "FL_HOR_SLIDER");
      o->type(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Value_Slider FL_HOR_SLIDER"));
    } // Fl_Value_Slider* o
    { Fl_Value_Slider* o = new Fl_Value_Slider(140, 330, 130, 20, "FL_HOR_FILL_SLIDER");
      o->type(3);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Value_Slider FL_HOR_FILL_SLIDER"));
    } // Fl_Value_Slider* o
    { Fl_Value_Slider* o = new Fl_Value_Slider(140, 370, 130, 20, "FL_HOR_NICE_SLIDER");
      o->type(5);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)10);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Value_Slider FL_HOR_NICE_SLIDER"));
    } // Fl_Value_Slider* o
    { Fl_Box* o = new Fl_Box(10, 450, 135, 50, "Fl_Value_Input");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Value_Input* o = new Fl_Value_Input(30, 470, 105, 25, "0");
      o->tooltip("Value Input");
      o->labelsize(8);
      o->maximum(100);
      o->step(0.1);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Value_Input"));
    } // Fl_Value_Input* o
    { Fl_Box* o = new Fl_Box(155, 450, 135, 50, "Fl_Value_Output");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->user_data((void*)("Fl_Value_Output"));
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Value_Output* o = new Fl_Value_Output(170, 470, 105, 25, "0");
      o->tooltip("Value Output");
      o->labelsize(8);
      o->maximum(100);
      o->step(0.1);
      o->callback((Fl_Callback*)callback);
    } // Fl_Value_Output* o
    { Fl_Box* o = new Fl_Box(300, 10, 130, 120, "   Fl_Scrollbar");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Scrollbar* o = new Fl_Scrollbar(305, 65, 95, 20, "FL_HORIZONTAL");
      o->tooltip("Horizontal Scrollbar");
      o->type(1);
      o->labelsize(8);
      o->maximum(100);
      o->Fl_Slider::value(20);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Scrollbar FL_HORIZONTAL"));
    } // Fl_Scrollbar* o
    { Fl_Scrollbar* o = new Fl_Scrollbar(400, 20, 20, 105, "0");
      o->tooltip("Vertical Scrollbar");
      o->labelsize(8);
      o->maximum(100);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Scrollbar FL_VERTICAL"));
      o->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Scrollbar* o
    { Fl_Box* o = new Fl_Box(440, 10, 130, 120, "Fl_Adjuster");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Adjuster* o = new Fl_Adjuster(450, 60, 75, 25, "w()>h()");
      o->tooltip("Horizontal Adjuster");
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Adjuster w()>h()"));
    } // Fl_Adjuster* o
    { Fl_Adjuster* o = new Fl_Adjuster(530, 35, 25, 75, "w()<h()");
      o->tooltip("Vertical Adjuster");
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Adjuster w()<h()"));
    } // Fl_Adjuster* o
    { Fl_Box* o = new Fl_Box(300, 140, 130, 120, "Fl_Counter");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Counter* o = new Fl_Counter(310, 175, 110, 25, "0");
      o->tooltip("Standard Counter");
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Counter"));
    } // Fl_Counter* o
    { Fl_Counter* o = new Fl_Counter(310, 215, 110, 25, "FL_SIMPLE_COUNTER");
      o->tooltip("Simple Counter");
      o->type(1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Counter FL_SIMPLE_COUNTER"));
    } // Fl_Counter* o
    { Fl_Box* o = new Fl_Box(440, 140, 130, 120, "Fl_Spinner");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Spinner* o = new Fl_Spinner(465, 176, 80, 24, "FL_INT_INPUT");
      o->labelsize(8);
      o->minimum(-30);
      o->maximum(30);
      o->step(2);
      o->value(5);
      o->callback((Fl_Callback*)callback_spinner, (void*)("Fl_Spinner FL_INT_INPUT"));
      o->align(Fl_Align(FL_ALIGN_BOTTOM));
    } // Fl_Spinner* o
    { Fl_Spinner* o = new Fl_Spinner(465, 216, 80, 24, "FL_FLOAT_INPUT");
      o->type(1);
      o->labelsize(8);
      o->minimum(0);
      o->maximum(1);
      o->step(0.01);
      o->value(0.05);
      o->callback((Fl_Callback*)callback_spinner, (void*)("Fl_Spinner FL_FLOAT_INPUT"));
      o->align(Fl_Align(FL_ALIGN_BOTTOM));
      o->wrap(0); // disable wrap mode
    } // Fl_Spinner* o
    { Fl_Box* o = new Fl_Box(300, 270, 270, 105, "Fl_Dial");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Dial* o = new Fl_Dial(320, 295, 65, 65, "0");
      o->tooltip("Standard Dial");
      o->color((Fl_Color)10);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->value(0.5);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Dial"));
      o->angles(0,315);
    } // Fl_Dial* o
    { Fl_Dial* o = new Fl_Dial(400, 295, 65, 65, "FL_LINE_DIAL");
      o->tooltip("Line Dial");
      o->type(1);
      o->color((Fl_Color)10);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->value(0.5);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Dial FL_LINE_DIAL"));
    } // Fl_Dial* o
    { Fl_Dial* o = new Fl_Dial(480, 295, 65, 65, "FL_FILL_DIAL");
      o->tooltip("Fill Dial");
      o->type(2);
      o->color((Fl_Color)10);
      o->selection_color((Fl_Color)1);
      o->labelsize(8);
      o->value(1);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Dial FL_FILL_DIAL"));
      o->angles(0,360);
    } // Fl_Dial* o
    { Fl_Box* o = new Fl_Box(300, 385, 150, 115, "Fl_Roller");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Roller* o = new Fl_Roller(315, 390, 20, 95, "0");
      o->tooltip("Vertical Roller");
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Roller FL_VERTICAL"));
    } // Fl_Roller* o
    { Fl_Roller* o = new Fl_Roller(345, 430, 90, 20, "FL_HORIZONTAL");
      o->tooltip("Horizontal Roller");
      o->type(1);
      o->labelsize(8);
      o->callback((Fl_Callback*)callback, (void*)("Fl_Roller FL_HORIZONTAL"));
    } // Fl_Roller* o
    { Fl_Box* o = new Fl_Box(460, 385, 110, 115, "Some widgets have color(FL_GREEN) and color2(FL_RED) to show the areas these \
effect.");
      o->box(FL_BORDER_FRAME);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color(FL_FOREGROUND_COLOR);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* o
    { Fl_Simple_Terminal* o = tty = new Fl_Simple_Terminal(10, 513, 560, 117);
      tty->box(FL_NO_BOX);
      tty->color(FL_FOREGROUND_COLOR);
      tty->selection_color(FL_BACKGROUND_COLOR);
      tty->labeltype(FL_NORMAL_LABEL);
      tty->labelfont(0);
      tty->labelsize(14);
      tty->labelcolor(FL_FOREGROUND_COLOR);
      tty->align(Fl_Align(FL_ALIGN_CENTER));
      tty->when(FL_WHEN_RELEASE);
      o->ansi(true);
    } // Fl_Simple_Terminal* tty
    o->end();
  } // Fl_Double_Window* o
  w->show(argc, argv);
  return Fl::run();
}

void callback(Fl_Widget* o, void*) {
  const char *name = (const char*)(o->user_data() ? o->user_data() : "???");
  tty->printf("callback(): %s value() = \033[2m%g\033[0m\n",
              name, ((Fl_Valuator*)o)->value());
}

/**
 Spinner doesn't derive from Fl_Valuator..
*/
void callback_spinner(Fl_Widget* o, void*) {
  const char *name = (const char*)(o->user_data() ? o->user_data() : "???");
  tty->printf("callback(): %s value() = \033[2m%g\033[0m\n",
              name, ((Fl_Spinner*)o)->value());
}
